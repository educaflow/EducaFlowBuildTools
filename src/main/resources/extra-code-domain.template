    //Estados del expediente
    public enum State {
{% for state in states %}{{tab}}{{tab}}{{ state.name }}({% if state.profile is not empty %}Profile.{{state.profile}}{% else %}null{% endif %},{{state.initial}},{{state.closed}}{% if state.events|length > 0 %}{% for event in state.events %},Event.{{event}}{% endfor %}{% endif %}){% if not loop.last %},{{ newLine }}{% endif %}{% endfor %};
                                                        
    private final Profile profile;
    private final java.util.List<Event> events;
    private final boolean initial;
    private final boolean closed;

    // Constructor del enum Estado
    State(Profile profile, boolean initial, boolean closed, Event... events) { // Usamos varargs para los events
        this.profile = profile;
        this.initial=initial;
        this.closed=closed;
        this.events = java.util.Arrays.asList(events); // Convertimos el array de varargs a una List
    }


    public Profile getProfile() {
        return profile;
    }

    public java.util.List<Event> getEvents() {
        return events;
    }

    public boolean isInitial() {
        return initial;
    }

    public boolean isClosed() {
        return closed;
    }


    }

    //Events del expediente
    public enum Event {
{% for event in events %}        {{ event }}{% if not loop.last %},{{ newLine }}{% endif %}{% endfor %}
    }

    //Perfiles del expediente
    public enum Profile {
{% for profile in profiles %}        {{ profile }}{% if not loop.last %},{{ newLine }}{% endif %}{% endfor %}
    }


    public void updateState(State state) {
        super.updateState(state);
        //super.updateCurrentProfile(state.getProfile());
    }